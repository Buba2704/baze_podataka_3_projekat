/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme.ZapisnikOPrijemuMaterijala;

import forme.stavkaZapisnikaOPrijemuMaterijala.*;
import controller.ClientController;
import domain.Magacin;
import domain.PoslovniPartner;
import domain.PoslovniPartnerView;
import domain.Radnik;
import domain.StavkaZapisnikaOPrijemuMaterijala;
import domain.ZapisnikOPrijemuMaterijala;
import forme.trebovanje.FormUnosTrebovanja;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.TableStringConverter;
import jdk.nashorn.internal.runtime.JSType;
import models.TableModelIstorija;
import models.TableModelStavkaZOPM;
import models.TableModelZOPM;




public class FormListaZOPM extends javax.swing.JDialog {

    
    private ArrayList<ZapisnikOPrijemuMaterijala> lista;
    ZapisnikOPrijemuMaterijala zap = new ZapisnikOPrijemuMaterijala();
    TableModelZOPM model = new TableModelZOPM();
    
    public FormListaZOPM(JDialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Lista zapisnika o prijemu materijala");
        Thread th = new Thread();
        th.start();
        tblStavki.setModel(model);
        popuniPartnere();
        popuniRadnike();
        popuniMagacine();
        cmbPartner.setSelectedIndex(-1);
        cmbRadnik.setSelectedIndex(-1);
        cmbMagacin.setSelectedIndex(-1);
        txtBrojDostavnice.setEnabled(false);
        txtEvidencioni.setEnabled(false);
        txtDatum.setEnabled(false);
        cmbRadnik.setEnabled(false);
        cmbPartner.setEnabled(false);
        cmbMagacin.setEnabled(false);
        btnUnos.setEnabled(false);
        btnIzmena.setEnabled(false);
        btnBrisanje.setEnabled(false);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblStavki = new javax.swing.JTable();
        btnBrisanje = new javax.swing.JButton();
        btnUnos = new javax.swing.JButton();
        btnIzmena = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtBrojDostavnice = new javax.swing.JFormattedTextField();
        txtPretraga = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtEvidencioni = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        txtDatum = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        cmbPartner = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cmbRadnik = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        cmbMagacin = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblStavki.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblStavki);

        btnBrisanje.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnBrisanje.setText("Obrisi stavku");
        btnBrisanje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrisanjeActionPerformed(evt);
            }
        });

        btnUnos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUnos.setText("Unesi stavku");
        btnUnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnosActionPerformed(evt);
            }
        });

        btnIzmena.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnIzmena.setText("Izmeni stavku");
        btnIzmena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmenaActionPerformed(evt);
            }
        });

        jLabel1.setText("Pretraga (sifZOPM):");

        jLabel2.setText("Broj dostavnice:");

        txtBrojDostavnice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0"))));

        txtPretraga.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPretragaKeyReleased(evt);
            }
        });

        jLabel3.setText("Evidencioni broj:");

        jLabel4.setText("Datum:");

        txtDatum.setDateFormatString("dd.MM.yyyy");

        jLabel5.setText("Partner:");

        cmbPartner.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText("Radnik:");

        cmbRadnik.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setText("Magacin:");

        cmbMagacin.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnUnos, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(61, 61, 61)
                            .addComponent(btnIzmena, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBrisanje, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtPretraga, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtBrojDostavnice, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(cmbRadnik, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDatum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtEvidencioni)
                            .addComponent(cmbPartner, 0, 137, Short.MAX_VALUE)
                            .addComponent(cmbMagacin, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPretraga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtBrojDostavnice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(txtEvidencioni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(cmbPartner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbRadnik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(cmbMagacin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUnos)
                    .addComponent(btnIzmena)
                    .addComponent(btnBrisanje))
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnosActionPerformed
        new FormUnosZOPM(this, rootPaneCheckingEnabled, zap).setVisible(true);
    }//GEN-LAST:event_btnUnosActionPerformed

    private void btnIzmenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmenaActionPerformed
       int row = tblStavki.getSelectedRow();
       if(row>=0){
           StavkaZapisnikaOPrijemuMaterijala s = ((TableModelZOPM)tblStavki.getModel()).getSelectedstavka(row);
            new FormIzmenaZOPM(this, rootPaneCheckingEnabled, s).setVisible(true);
       }
       else{
           JOptionPane.showMessageDialog(this, "Izaberite stavku zapisnika koje zelite da izmenite!");
       }
    }//GEN-LAST:event_btnIzmenaActionPerformed

    private void btnBrisanjeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrisanjeActionPerformed
        int row = tblStavki.getSelectedRow();
        
        if(row>=0){
           StavkaZapisnikaOPrijemuMaterijala s = ((TableModelZOPM)tblStavki.getModel()).getSelectedstavka(row);
           int result = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da zelite da obrisete ovu stavku?", "Konfirmacija", JOptionPane.YES_NO_OPTION);
            if(result == JOptionPane.NO_OPTION){
                return;
            }
            if(result == JOptionPane.YES_OPTION){
               try {
                   ClientController.getInstance().deleteStavkaZOPM(s);
                   ((TableModelZOPM)tblStavki.getModel()).refreshTable();
                   JOptionPane.showMessageDialog(this, "Uspesno obrisana stavka."); 
               } catch (Exception ex) {
                   Logger.getLogger(FormListaZOPM.class.getName()).log(Level.SEVERE, null, ex);
               }
            } 
        } else{
           JOptionPane.showMessageDialog(this, "Izaberite stavku koji zelite da obrisete!");
        } 
    }//GEN-LAST:event_btnBrisanjeActionPerformed

    private void txtPretragaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPretragaKeyReleased

        zap = null;

        String param = txtPretraga.getText();
        ((TableModelZOPM)tblStavki.getModel()).setParametar(param);
        if( isNumber(param)&& !param.equals("")){
            try {
                lista = ClientController.getInstance().getAllZOPM();
                lista.forEach((ZapisnikOPrijemuMaterijala z) -> {
                    if(z.getSifZOPM() == Long.parseLong(param) ){
                        this.zap = z;
                    }
                });
            } catch (Exception ex) {
                Logger.getLogger(FormListaZOPM.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if(param.equals("")){
            refreshTable();
        }
        
        if(zap!=null){
            btnUnos.setEnabled(true);
            btnIzmena.setEnabled(true);
            btnBrisanje.setEnabled(true);
            txtBrojDostavnice.setText(String.valueOf(zap.getBrojDostavnice()));
            txtEvidencioni.setText(String.valueOf(zap.getEvidencioniBroj()));
            txtDatum.setDate(zap.getDatumDokumenta());
            cmbPartner.getModel().setSelectedItem(zap.getPartner());
            cmbRadnik.getModel().setSelectedItem(zap.getRadnik());
            cmbMagacin.getModel().setSelectedItem(zap.getMagacin());
        }
        else{
            btnUnos.setEnabled(false);
            btnIzmena.setEnabled(false);
            btnBrisanje.setEnabled(false);
            txtBrojDostavnice.setText("");
            txtEvidencioni.setText("");
            txtDatum.setDate(null);
            cmbPartner.setSelectedIndex(-1);
            cmbRadnik.setSelectedIndex(-1);
            cmbMagacin.setSelectedIndex(-1);     
        }
        
    }//GEN-LAST:event_txtPretragaKeyReleased

    /**
     * @param args the command line arguments
     */
    
    void refreshTable(){
        TableModelZOPM ts = (TableModelZOPM)tblStavki.getModel();
        ts.refreshTable();
    }
    
    public static boolean isNumber(String number){
        try{
            Long.parseLong(number);
            return true;
        }catch(NumberFormatException e){}
        return false;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrisanje;
    private javax.swing.JButton btnIzmena;
    private javax.swing.JButton btnUnos;
    private javax.swing.JComboBox cmbMagacin;
    private javax.swing.JComboBox cmbPartner;
    private javax.swing.JComboBox cmbRadnik;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblStavki;
    private javax.swing.JFormattedTextField txtBrojDostavnice;
    private com.toedter.calendar.JDateChooser txtDatum;
    private javax.swing.JFormattedTextField txtEvidencioni;
    private javax.swing.JTextField txtPretraga;
    // End of variables declaration//GEN-END:variables

    private void popuniPartnere() {
        try {
            ArrayList<PoslovniPartner> partneri;
            
            partneri = ClientController.getInstance().getAllPoslovniPartner();
            cmbPartner.removeAllItems();
            
            for(PoslovniPartner p: partneri){
                cmbPartner.addItem(p);
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(FormListaZOPM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void popuniRadnike() {
        try {
            ArrayList<Radnik> radnici;
            
            radnici = ClientController.getInstance().getAllRadnik();
            cmbRadnik.removeAllItems();
            
            for(Radnik r: radnici){
                cmbRadnik.addItem(r);
 
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(FormListaZOPM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void popuniMagacine() {
        try {
            ArrayList<Magacin> magacini;
            
            magacini = ClientController.getInstance().getAllMagacin();
            cmbMagacin.removeAllItems();
            
            for(Magacin m: magacini){
                cmbMagacin.addItem(m);
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(FormListaZOPM.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }

}
